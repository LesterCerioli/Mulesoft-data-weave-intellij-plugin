Intellij snippets

//refactor multiple targets
 IntroduceTargetChooser.showChooser(operation.getEditor(), expressions, new Pass<GoExpression>() {
        @Override
        public void pass(GoExpression expression) {
          if (expression.isValid()) {
            operation.setExpression(expression);
            performOnElement(operation);
          }
        }
      }, expression1 -> expression1.isValid() ? expression1.getText() : "<invalid expression>");


<codeInsight.lineMarkerProvider language="JAVA" implementationClass="com.simpleplugin.SimpleLineMarkerProvider"/>

ParameterInfoHandler

Replace error message panel with
com.intellij.notification.EventLogConsole.createLogEditor

Module Interesting stuff

* com.intellij.openapi.roots.ModuleRootManager
* final Module module = ModuleUtil.findModuleForFile(virtualFile, project);


public class PsiUtils {
    public static List<VirtualFile> findFileByRelativePath(@NotNull Project project, @NotNull String fileRelativePath) {
       String relativePath = fileRelativePath.startsWith("/") ? fileRelativePath : "/" + fileRelativePath;
        Set<FileType> fileTypes = Collections.singleton(FileTypeManager.getInstance().getFileTypeByFileName(relativePath));
        final List<VirtualFile> fileList = new ArrayList<>();
        FileBasedIndex.getInstance().processFilesContainingAllKeys(FileTypeIndex.NAME, fileTypes, GlobalSearchScope.projectScope(project), null, virtualFile -> {
           if (virtualFile.getPath().endsWith(relativePath)) {
              fileList.add(virtualFile);
           }
           return true;
        });
        return fileList;
     }
}

///////


ApplicationManager.getApplication().invokeLater(() -> {
      StatusBar statusBar = WindowManager.getInstance().getStatusBar(project);
      if (statusBar != null && !isDisposed()) {
        statusBar.addWidget(widget, "after " + (SystemInfo.isMac ? "Encoding" : "InsertOverwrite"), project);
        subscribeToMappingChanged();
        subscribeToRepoChangeEvents(project);
        update();
      }
    }, project.getDisposed());


----------------------------------------------------------------------------------------------------------------

TODO Implement

* WeaveQualifiedNameProvider DONE
* PSI Stubs for fast search
** https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs/stub_indexes.html?search=index
** https://www.jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs/file_based_indexes.html?search=index

* com.intellij.execution.filters.ConsoleFilterProvider
** <consoleFilterProvider implementation="org.mule.tooling.esb.console.ConsoleFlowStackFilterProvider" order="first"/>