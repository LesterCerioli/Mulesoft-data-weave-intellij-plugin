{
  parserClass="org.mule.tooling.lang.dw.parser.WeaveParser"
  parserUtilClass="org.mule.tooling.lang.dw.parser.WeaveParserUtil"
  psiImplUtilClass = 'org.mule.tooling.lang.dw.parser.psi.WeavePsiImplUtils'
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="Weave"
  psiImplClassSuffix="Impl"
  psiPackage="org.mule.tooling.lang.dw.parser.psi"
  psiImplPackage="org.mule.tooling.lang.dw.parser.psi.impl"
  elementTypeHolderClass="org.mule.tooling.lang.dw.parser.psi.WeaveTypes"
  elementTypeClass="org.mule.tooling.lang.dw.parser.WeaveElementType"
  tokenTypeClass="org.mule.tooling.lang.dw.parser.WeaveTokenType"

  tokens = [
        L_PARREN='('
        R_PARREN=')'

        L_CURLY='{'
        R_CURLY='}'
        L_BRACKET='['
        R_BRACKET=']'
        SUB_TYPE='<:'
        COMMA=','
        COLON=':'
        FAT_ARROW='=>'

        LINE_COMMENT="regexp://([^\r\n])*?"

        DOUBLE_QUOTED_STRING="regexp:\"([^\\\"\r\n]|\\[^\r\n])*\"?"
        SINGLE_QUOTED_STRING="regexp:'([^\\\'\r\n]|\\[^\r\n])*'?"
        BACKTIKED_QUOTED_STRING="regexp:`([^\\\'\r\n]|\\[^\r\n])*`?"

        MIME_TYPE_KEYWORD="regexp:[\"text\" | \"audio\" | \"video\" | \"application\" | \"multipart\" | \"image\" ]\"/\"[a-zA-Z\-_]+"

        //
        DOCUMENT_SEPARATOR="---"
        UNDERSCORE="_"
        NOT_EQUAL="!="
        SIMILAR="~="
        TILDE="~"
        EQUAL="=="
        EQ="="
        LESS="<"
        LESS_EQUAL="<="
        GREATER=">"
        GREATER_EQUAL=">="
        AS="as"
        IS="is"
        FROM_KEYWORD="from"
        PLUS="+"
        MINUS="-"
        MULTIPLY="*"
        DIVISION="/"
        MODULO="%"

        AT="@"
        QUESTION="?"
        ESCLAMATION="!"
        HASH="#"

        AND_KEYWORD="and"
        DO_KEYWORD="do"
        OR_KEYWORD="or"

        ARROW_TOKEN="->"

        IF="if"

        TRUE_LITERAL="true"
        FALSE_LITERAL="false"
        RULE_NULL_LITERAL="null"

        VERSION_DIRECTIVE_KEYWORD="%dw"
        INPUT_DIRECTIVE_KEYWORD="input"
        VAR_DIRECTIVE_KEYWORD="var"
        FUNCTION_DIRECTIVE_KEYWORD="fun"
        ANNOTATION_DIRECTIVE_KEYWORD="annotation"
        NAMESPACE_DIRECTIVE_KEYWORD="ns"
        TYPE_DIRECTIVE_KEYWORD="type"
        MATCHES_KEYWORD="matches"
        MATCH_KEYWORD="match"
        OUTPUT_DIRECTIVE_KEYWORD="output"
        NOT_KEYWORD="not"
        CASE_KEYWORD="case"

        OR="|"
        XOR="^"
        AND="&"
        OPEN_CLOSE_KEYWORD="{|"
        OPEN_CLOSE_ORDERED_KEYWORD="{-|"
        OPEN_ORDERED_KEYWORD="{-"

        CLOSE_ORDERED_KEYWORD="-}"
        CLOSE_CLOSE_ORDERED_KEYWORD="|-}"
        CLOSE_CLOSE_KEYWORD="|}"

        PACKAGE_SEPARATOR="::"
  ]

    extends(".*(Directive)")=Directive
    extends(".*(Expression)")=Expression
    extends(".*(Type)")=Type
    extends(".*(Pattern)")=Pattern
    extends(".*(Literal)")=LiteralExpression
    extends(".*(KeyValuePair)")=KeyValuePair
    extends(".*(Attribute)")=Attribute

}

root ::= Document

Document ::= Header ('---'  Body) ? | Body {
    implements=["com.intellij.psi.NavigatablePsiElement" "com.intellij.psi.PsiQualifiedNamedElement"]
    methods=[getPresentation getQualifiedName getName setName isMappingDocument isModuleDocument]
}

Header::= (Directive)+

Directive
         ::= Annotation*
         (VersionDirective
           | NamespaceDirective
           | VariableDirective
           | AnnotationDirective
           | OutputDirective
           | InputDirective
           | TypeDirective
           | ImportDirective
           | FunctionDirective) {recoverWhile=HeaderRecover}

AnnotationDirective ::= 'annotation' AnnotationDefinition
{
     pin=1
}

AnnotationDefinition ::= Identifier '('( AnnotationParameter ( ',' AnnotationParameter )*  )?')'
{
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=1
}

AnnotationParameter::= (Identifier) ':' TypeLiteral

private HeaderRecover::= !('---'|OUTPUT_DIRECTIVE_KEYWORD|'type'|'fun'|'ns'|'var'|'%dw'|'input'|IMPORT_DIRECTIVE_KEYWORD | '@' | 'annotation')

VersionDirective::= '%dw'  DOUBLE_LITERAL {pin=1}

ImportDirective::= IMPORT_DIRECTIVE_KEYWORD (((ImportedElement (',' ImportedElement)*) | '*') 'from')? ModuleReference ('as' Identifier)? {pin=1}

ImportedElement::= Identifier ('as' Identifier)? {pin=2}

NamespaceDirective::= 'ns' NamespaceDefinition {pin=1}

NamespaceDefinition::=Identifier NAMESPACE_URI
  {
      methods = [getName setName getNameIdentifier]
      implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
      mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
      pin=1
 }

VariableDirective::= 'var' VariableDefinition {pin=1}

OutputDirective::= OUTPUT_DIRECTIVE_KEYWORD (":" Type)? DataFormat Options? {pin=1}

TypeDirective::= 'type' TypeDefinition {pin=1}

TypeDefinition::=Identifier TypeParameterDeclaration? '=' (TypeLiteral | UndefinedLiteral)
                 {
                      methods = [getName setName getNameIdentifier]
                      implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
                      mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
                      pin=1
                 }

FunctionDirective::=  'fun' FunctionDefinition {pin=1}

FunctionDefinition::=Identifier TypeParameterDeclaration? L_PARREN ( FunctionParameter ( ',' FunctionParameter )* )? R_PARREN ( ":" (Type | DynamicReturn) "=" | "=")? Expression
{
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
     pin=3
}

DynamicReturn ::= '?'

Schema::= '{' ( SchemaElement ( ',' SchemaElement )* )? '}' {pin = 1}

SchemaElement::= (Identifier | StringLiteral) ':' Expression {pin = 2}

InputDirective::= 'input' VariableNameTypeDefinition DataFormat Options? {pin=1}

Options::= OptionElement ( ',' OptionElement )*

OptionElement::= Identifier '=' LiteralExpression

Body ::= Expression

ObjectExpression ::= SingleKeyValuePairObj | MultipleKeyValuePairObj {
    implements="com.intellij.psi.NavigatablePsiElement"
    methods=[getPresentation]
}

SingleKeyValuePairObj ::= KeyValuePair

MultipleKeyValuePairObj::= '{' objectEntryRule? (',' objectEntryRule)* ','? '}' {pin= 1}

private objectEntryRule ::= KeyValuePair | DynamicKeyValuePair

KeyValuePair::= ConditionalKeyValuePair | SimpleKeyValuePair

DynamicKeyValuePair ::= EnclosedExpression

SimpleKeyValuePair ::= Key ':' Expression
{
    implements="com.intellij.psi.NavigatablePsiElement"
    methods=[getPresentation]
}
ConditionalKeyValuePair ::= '(' SimpleKeyValuePair ')' IF SimpleExpression

Key::=  QualifiedName Attributes?

QualifiedName::= DeclaredNamespace? (Identifier | StringLiteral| EnclosedExpression)

DeclaredNamespace::= Identifier '#'

Attributes::= '@(' ( Attribute ( ',' Attribute )* )? ')'

Attribute::= ConditionalAttribute
           | SimpleAttribute
           | DynamicAttribute

DynamicAttribute ::= EnclosedExpression

SimpleAttribute::= QualifiedName ':' Expression

ConditionalAttribute::= '(' SimpleAttribute ')' IF Expression {pin = 6}

Expression::= MatchExpression
            | CustomInterpolatorExpression
            | DefaultValueExpression
            | BinaryExpression
            | SimpleExpression

CustomInterpolatorExpression ::= Identifier CustomInterpolationString
{
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}
CustomInterpolationString ::= BACKTIKED_QUOTED_STRING
{
    mixin = "org.mule.tooling.lang.dw.parser.psi.WeaveStringLiteralMixin"
}

private ValueExpression::=UndefinedLiteral
                  | UnaryMinusExpression
                  | NotExpression
                  | ConditionalExpression
                  | UsingExpression
                  | DoExpression
                  | LambdaLiteral
                  | ObjectDeconstructExpression
                  | ObjectExpression
                  | ArrayExpression
                  | VariableReferenceExpression
                  | LiteralExpression
                  | EnclosedExpression

private SimpleExpression ::=
             OrExpression
            | AndExpression
            | EqualityExpression
            | GreaterThanExpression
            | AdditionSubtractionExpression
            | RightShiftExpression
            | LeftShiftExpression
            | MultiplicationDivisionExpression
            | AsExpression
            | IsExpression
            | ValueExpression
            | FunctionCallExpression
            | DotSelectorExpression
            | BracketSelectorExpression


Annotation ::= '@'FqnIdentifier AnnotationArguments? {pin=2}

AnnotationArguments ::= '(' (AnnotationArgument ( ',' AnnotationArgument )* )? (',')? ')'

AnnotationArgument ::= Identifier '=' Expression

UnaryMinusExpression ::= '-' SimpleExpression {pin=1}

BinaryExpression ::= Expression Identifier SimpleExpression
{
     methods = [getName setName getNameIdentifier getLeft getRight]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}

AsExpression
         ::= Expression 'as' TypeLiteral {pin=2}

DefaultValueExpression
         ::= Expression DEFAULT SimpleExpression {pin=2}

OrExpression
         ::= Expression 'or' AndExpression {pin=2}

AndExpression
         ::= Expression 'and' EqualityExpression {pin=2}

EqualityExpression
         ::= Expression ( '==' | '!=' | '~=' ) GreaterThanExpression {pin=2}

IsExpression
         ::= Expression IS TypeLiteral {pin=2}

NotExpression ::= 'not' ValueExpression

GreaterThanExpression
         ::= Expression  ( '>' !('>') | '>=' |  '<' !('<') | '<=' ) AdditionSubtractionExpression {pin=2}

AdditionSubtractionExpression
         ::= Expression  ( '+' | '-' ) Expression {pin=2}

RightShiftExpression
         ::= Expression '>''>' MultiplicationDivisionExpression {pin=2}

LeftShiftExpression
         ::= Expression '<''<' MultiplicationDivisionExpression {pin=2}

MultiplicationDivisionExpression ::= Expression  ( '*' | '/' ) Expression {pin=2}

FunctionCallExpression ::= Expression FunctionCallArguments

FunctionCallArguments ::= '(' ( Expression ( ',' Expression )* )? (',')? ')'

UsingExpression ::=USING '(' VariableDefinition ( ',' VariableDefinition )* ')' Expression {pin=1}


ConditionalExpression ::= ( IF | UNLESS ) EnclosedExpression Expression ELSE Expression {pin=1}

EnclosedExpression ::= '(' Expression ')'

//Selectors
DotSelectorExpression ::=Expression ( '..' | '.' ) Selector? ('!'| '?')? {pin=2}

BracketSelectorExpression::=Expression '[' ('?' |'@' | '&' | '^' |'*')?  (BinaryExpression | SimpleExpression )  ']' ('!'| '?')? {pin=5}

MatchExpression ::= Expression 'match' (PatternMatcherExpression )

PatternMatcherExpression ::= '{' ('case' Pattern)+ (DefaultPattern)? '}' {pin = 2}

Pattern ::= RegexPattern
          | NamedRegexPattern
          | EmptyArrayPattern
          | EmptyObjectPattern
          | ObjectDeconstructPattern
          | ArrayDeconstructPattern
          | TypePattern
          | NamedTypePattern
          | LiteralPattern
          | NamedLiteralPattern
          | ExpressionPattern

EmptyArrayPattern ::= '['']'  '->' Expression

EmptyObjectPattern ::= '{''}'  '->' Expression

ObjectDeconstructPattern ::= '{' Identifier ':' Identifier '~' Identifier '}' '->' Expression {pin=5}

ArrayDeconstructPattern::= '[' Identifier '~' Identifier ']' '->' Expression {pin=3}

LiteralPattern ::= LiteralExpression '->' Expression

ExpressionPattern ::= Identifier IF SimpleExpression '->' Expression {
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}

NamedLiteralPattern ::= Identifier ':' LiteralExpression '->' Expression {
     methods = [getName setName getNameIdentifier]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}

TypePattern ::= 'is' Type '->' Expression {pin = 3}

NamedTypePattern ::= Identifier "is" TypeLiteral '->' Expression {
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
    pin = 2
}

RegexPattern ::= 'matches' RegexLiteral '->' Expression {
    pin = 3
}

NamedRegexPattern ::= Identifier 'matches' RegexLiteral '->' Expression {
    methods = [getName setName getNameIdentifier]
    implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
    mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
    pin = 4
}

DefaultPattern ::= ELSE '->' Expression {pin=1}

Selector ::= (ValueSelector |
         AttributeSelector |
         NamespaceSelector |
         SchemaSelector |
         ObjectSelector |
         MultiValueSelector)

ValueSelector ::= (DeclaredNamespace? (StringLiteral|Identifier))

AttributeSelector ::='@'(DeclaredNamespace? (StringLiteral|Identifier))?

ObjectSelector ::='&'(DeclaredNamespace? (StringLiteral|Identifier))?

SchemaSelector ::='^'(DeclaredNamespace? (StringLiteral|Identifier))?

NamespaceSelector ::='#'

MultiValueSelector ::= '*'(DeclaredNamespace? (StringLiteral|Identifier))

VariableReferenceExpression ::= FqnIdentifier


VariableDefinition ::= VariableNameTypeDefinition '='  Expression  {
            methods=[getName setName getNameIdentifier]
            implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
            mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
        }

private VariableNameTypeDefinition ::= Annotation* Identifier (":" Type)?

//Literal Values
LiteralExpression
         ::= BooleanLiteral
           | NullLiteral
           | StringLiteral
           | NumberLiteral
           | AnyDateLiteral
           | RegexLiteral

DoExpression ::= 'do' '{' (DoDirectives+ '---')?  Expression'}'


private DoDirectives
         ::=  Annotation* (VariableDirective
           | TypeDirective
           | ImportDirective
           | NamespaceDirective
           | FunctionDirective) {recoverWhile=HeaderRecover}

UndefinedLiteral ::= '?''?''?'

LambdaLiteral ::= TypeParameterDeclaration? '(' ( FunctionParameter ( ',' FunctionParameter )* )? ')' (':' Type)?  '->' SimpleExpression {pin = 6}

private TypeParameterDeclaration ::= '<' (TypeParameter (',' TypeParameter)*)? '>'

FunctionParameter ::= VariableNameTypeDefinition ('=' Expression)?  {
        methods=[getName setName getNameIdentifier]
        mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
        implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"

     }

NullLiteral ::= NULL_LITERAL_KEYWORD

BooleanLiteral ::= TRUE_LITERAL
                        | FALSE_LITERAL

StringLiteral ::= DOUBLE_QUOTED_STRING
                      | BACKTIKED_QUOTED_STRING
                      | SINGLE_QUOTED_STRING
{
    methods = [getValue]
     mixin = "org.mule.tooling.lang.dw.parser.psi.WeaveStringLiteralMixin"
}

AnyDateLiteral::= RULE_ANY_DATE

RegexLiteral::= RULE_ANY_REGEX {
mixin = "org.mule.tooling.lang.dw.parser.psi.WeaveRegexLiteralMixin"
}

ObjectDeconstructExpression ::= '{' KeyValuePair '~' Expression '}' {pin=3}

ArrayExpression::= '[' ']' | '[' ( ArrayElement (('~' Expression)  | ( ',' ArrayElement )* (',')? )?) ']'
{
    implements="com.intellij.psi.NavigatablePsiElement"
    methods=[getPresentation]
}

private ArrayElement::= ConditionalArrayElement | Expression

private ConditionalArrayElement ::= '(' Expression ')' IF SimpleExpression {pin=4}

private TypeLiteral ::= Type

Type ::= UnionType

private BasicTypeExpression ::= LambdaType | CloseOrderedObjectType | OrderedObjectType | CloseObjectType | ObjectType  | ReferenceType | ('(' Type ')')

TypeParameter ::= Identifier ( '<:' Type)? {
       methods = [getName setName getNameIdentifier]
       implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
       mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
   }

UnionType ::= IntersectionType UnionTypeExpression* {pin= 2}

private UnionTypeExpression ::= ('|' IntersectionType) {pin= 2}

IntersectionType ::= BasicTypeExpression (IntersectionTypeExpression)* {pin= 2}

private IntersectionTypeExpression ::=  ('&' BasicTypeExpression) {pin= 2}

ObjectType ::=   '{' ((KeyValuePairType)? (',' KeyValuePairType)*)?  '}' (Schema)? {pin = 1}

CloseObjectType ::=  '{|' ((KeyValuePairType)? (',' KeyValuePairType)*)? '|}' (Schema)? {pin = 1}

OrderedObjectType ::=   '{-' ((KeyValuePairType)? (',' KeyValuePairType)*)?  '-}' (Schema)? {pin = 1}

CloseOrderedObjectType ::=   '{-|' ((KeyValuePairType)? (',' KeyValuePairType)*)?  '|-}' (Schema)? {pin = 1}

KeyValuePairType ::=  KeyType ('*')? ('?')? ":" Type

KeyType ::= NameType AttributesType?

AttributesType ::= "@""(" NameType ":" Type (',' NameType ":" Type)* ")" {pin= 1}

NameType ::= ((Identifier"#")?(Identifier | StringLiteral) ('?')?) | '_' | '('TypeParameter')'

LambdaType ::= '(' (LambdaTypeParameter (',' LambdaTypeParameter)*)? ')' '->' Type {pin= 5}

LambdaTypeParameter ::= NamedLambdaTypeParameter | Type

private NamedLambdaTypeParameter ::= Identifier ':' Type {pin=2}

ReferenceType ::= FqnIdentifier ('<' Type (',' Type)* '>')? (Schema)? {pin = 2}

DataFormat ::= MIME_TYPE_KEYWORD

NumberLiteral ::= DOUBLE_LITERAL | INTEGER_LITERAL

FqnIdentifier ::= CustomLoader? ContainerModuleIdentifier Identifier
{
     methods = [getName setName getNameIdentifier getReferences]
     implements="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElement"
     mixin="org.mule.tooling.lang.dw.parser.psi.WeaveNamedElementImpl"
}

ModuleReference ::= CustomLoader? ContainerModuleIdentifier Identifier  {
 methods = [getPath getModuleFQN getReferences]
}

ContainerModuleIdentifier ::= (Identifier '::')*

CustomLoader ::= Identifier"!"

Identifier ::= (DOLLAR_VARIABLE | ID | 'match' |'matches' | 'from' | 'not')  {methods = [getName] }
