/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.mule.tooling.lang.dw.lexer;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static org.mule.tooling.lang.dw.parser.psi.WeaveTypes.*;
import static org.mule.tooling.lang.dw.parser.WeaveParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_WeaveLexer.flex</tt>
 */
public class _WeaveLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 7, 2]
   * Total runtime size is 22344 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<7)|((ch>>2)&0x7f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1"+
    "\21\1\50\1\51\1\52\1\53\1\54\1\55\2\21\1\25\1\56\1\57\5\21\2\25\1\60\7\21"+
    "\1\61\1\62\20\21\1\25\1\63\1\21\1\64\40\21\1\65\5\21\1\66\11\21\1\67\1\70"+
    "\1\71\1\72\10\21\1\73\2\21\1\74\10\21\123\25\1\75\7\25\1\76\1\77\12\61\1\100"+
    "\24\21\1\25\1\101\u0582\21\1\102\u017f\21");

  /* The ZZ_CMAP_Y table has 8576 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\4\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\10\0\1\31\1\32\1\33\1\34"+
    "\1\3\1\35\1\33\1\3\5\36\1\37\7\36\1\37\162\36\1\40\1\41\2\36\1\40\3\3\1\36"+
    "\1\42\1\3\1\43\4\3\34\0\1\36\1\44\1\41\1\45\1\3\1\33\1\37\1\44\4\36\1\46\24"+
    "\36\1\46\42\36\1\47\1\0\1\41\47\36\2\50\1\51\10\36\1\37\1\35\1\3\1\51\11\36"+
    "\1\3\1\52\1\53\12\0\1\54\1\55\1\54\2\3\6\36\1\37\1\3\1\37\3\3\1\0\1\56\1\52"+
    "\1\3\2\0\1\57\1\3\12\36\1\60\7\0\1\32\1\41\1\61\30\36\1\62\1\0\1\54\1\0\1"+
    "\63\1\64\1\65\2\0\1\65\1\66\3\3\1\52\1\67\7\36\6\0\1\57\1\51\25\36\1\70\2"+
    "\0\1\71\3\3\2\0\1\65\7\36\1\60\2\0\1\40\1\33\1\3\5\36\1\70\1\72\2\0\2\73\1"+
    "\32\4\3\6\36\1\73\21\3\1\74\2\36\1\75\1\50\1\76\13\3\6\0\1\57\1\0\15\36\1"+
    "\70\1\77\4\0\1\73\1\0\2\36\1\70\1\31\2\0\1\51\1\36\1\100\1\36\1\101\1\51\1"+
    "\36\2\66\5\36\1\44\1\36\1\43\1\41\1\40\1\77\1\0\2\102\1\103\1\3\1\52\1\3\1"+
    "\46\1\70\1\31\2\0\1\70\1\3\1\52\1\3\1\53\1\51\1\37\1\104\1\66\5\36\1\44\1"+
    "\36\1\44\1\105\1\40\1\64\1\57\1\52\1\102\1\32\1\34\1\3\1\51\1\43\1\3\1\31"+
    "\2\0\1\65\1\106\2\3\1\53\1\51\1\36\2\46\5\36\1\44\1\36\1\44\1\51\1\40\1\77"+
    "\1\0\2\54\1\32\1\42\3\3\1\70\1\31\2\0\1\34\1\3\1\107\1\3\1\53\1\51\1\36\2"+
    "\66\5\36\1\44\1\36\1\44\1\51\1\40\1\77\1\0\2\102\1\32\1\3\1\31\1\3\1\46\1"+
    "\70\1\31\2\0\1\35\3\3\1\110\1\51\1\37\1\41\1\44\1\40\1\105\1\44\1\104\1\42"+
    "\1\37\1\41\2\36\1\40\1\31\1\57\1\31\1\64\1\32\1\42\1\52\3\3\1\31\2\0\2\3\1"+
    "\34\1\3\1\53\1\51\1\36\2\44\5\36\1\44\2\36\1\100\1\40\1\62\1\0\2\64\1\32\1"+
    "\3\1\55\1\111\1\3\1\70\1\31\2\0\4\3\1\31\1\51\1\36\2\44\5\36\1\44\2\36\1\51"+
    "\1\40\1\77\1\0\2\64\1\32\1\3\1\55\1\3\1\33\1\70\1\31\2\0\1\105\3\3\1\31\1"+
    "\51\1\36\2\44\11\36\1\37\1\62\1\0\2\64\1\103\1\3\1\52\1\3\1\112\1\70\1\31"+
    "\2\0\2\3\1\41\1\36\1\31\1\51\3\36\1\37\1\41\5\36\1\46\2\36\1\35\1\36\1\37"+
    "\1\113\1\52\1\0\1\114\2\0\4\3\1\31\3\3\1\51\13\36\1\67\1\0\1\57\1\52\1\36"+
    "\1\60\1\0\1\57\2\0\1\32\11\3\1\105\1\66\1\43\1\35\1\3\1\36\1\51\1\36\1\51"+
    "\1\115\1\41\1\51\1\67\1\0\1\54\1\71\1\36\1\43\1\0\1\32\2\0\1\32\1\36\10\3"+
    "\1\42\5\3\1\32\1\3\2\0\1\32\2\3\1\116\1\34\1\31\2\36\1\51\10\36\1\42\1\53"+
    "\4\0\1\64\1\36\1\73\2\0\1\53\10\0\1\56\1\3\1\113\16\3\12\36\1\60\4\0\1\117"+
    "\2\0\1\32\1\3\1\36\1\70\1\65\1\70\1\77\1\63\1\0\1\65\1\73\1\61\2\36\1\70\2"+
    "\0\1\72\3\0\1\32\11\36\1\46\1\3\1\35\12\36\1\37\123\36\1\44\1\40\1\36\1\37"+
    "\1\44\1\40\12\36\1\44\1\40\10\36\1\44\1\40\1\36\1\37\1\44\1\40\3\36\1\37\16"+
    "\36\1\44\1\40\20\36\1\37\1\53\10\3\4\36\4\3\25\36\1\120\1\50\1\121\1\51\232"+
    "\36\1\66\4\36\1\51\5\36\1\37\1\3\22\36\1\37\1\31\1\122\1\50\1\76\1\3\3\36"+
    "\1\44\1\70\1\56\2\3\4\36\1\70\1\56\2\3\4\36\1\70\3\3\3\36\1\44\1\123\3\3\15"+
    "\36\10\0\1\104\1\52\1\106\2\0\1\32\7\3\1\52\1\32\2\0\1\32\1\3\26\36\2\3\12"+
    "\36\1\124\1\3\21\36\1\40\2\3\7\36\1\125\3\0\1\3\3\0\2\3\1\31\2\0\7\36\1\40"+
    "\1\36\1\42\2\3\13\36\1\3\6\36\1\40\1\3\2\0\1\32\11\3\5\36\1\60\1\0\1\3\15"+
    "\36\1\73\1\0\1\57\7\0\1\102\2\0\1\32\1\3\2\0\1\32\2\3\1\104\26\3\1\0\1\61"+
    "\13\36\4\0\1\61\1\36\1\3\2\0\1\32\3\3\1\52\2\0\3\3\1\117\7\36\1\73\2\0\1\65"+
    "\2\0\1\65\12\36\1\70\3\0\3\3\11\36\5\0\2\3\2\0\1\32\1\51\2\0\1\65\10\36\1"+
    "\40\24\3\1\57\5\0\1\61\1\67\1\70\1\126\2\3\60\36\11\0\1\57\5\3\1\0\105\36"+
    "\1\40\1\36\1\40\11\36\1\40\1\36\1\40\2\36\2\115\7\36\1\40\15\36\1\44\1\36"+
    "\1\43\1\41\1\44\1\36\1\42\1\36\1\41\1\36\1\3\3\36\1\42\1\41\1\44\1\36\1\42"+
    "\2\3\1\52\1\0\6\3\1\31\1\57\3\3\1\52\1\56\4\3\1\56\2\3\1\0\1\56\1\31\1\0\1"+
    "\35\2\3\1\104\4\3\3\36\1\42\6\0\1\57\5\3\3\0\1\56\1\34\1\53\2\0\1\56\3\3\1"+
    "\33\1\104\1\41\2\36\1\35\1\51\1\40\1\3\1\43\1\44\1\46\2\36\1\40\1\36\1\3\1"+
    "\51\1\40\1\33\4\3\10\0\1\117\1\73\1\56\235\3\13\36\1\37\13\36\1\37\41\36\1"+
    "\42\1\104\1\60\1\65\3\3\11\36\1\46\1\3\1\35\16\36\1\3\1\104\3\3\1\52\5\36"+
    "\1\37\2\3\1\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\1\36\1\37\1\36"+
    "\1\37\1\36\1\37\10\0\13\3\1\104\165\3\1\127\6\3\1\53\3\0\1\51\1\40\1\117\1"+
    "\42\1\51\24\36\1\37\1\55\2\51\25\36\1\37\1\36\1\3\1\51\11\36\1\40\1\51\26"+
    "\36\1\37\4\3\6\36\1\37\15\3\361\36\1\40\22\3\163\36\1\75\1\50\1\121\12\3\43"+
    "\36\1\42\20\3\13\36\1\40\103\36\1\42\4\36\2\0\1\65\5\3\13\36\1\60\1\3\2\0"+
    "\1\130\6\36\1\50\1\131\21\36\1\70\2\0\1\32\10\3\1\104\2\36\1\41\31\36\1\66"+
    "\1\132\1\36\3\50\2\36\1\132\1\121\2\50\17\3\1\112\2\36\2\133\1\60\5\36\1\60"+
    "\1\0\4\3\1\56\1\3\15\36\3\3\1\65\14\36\4\0\1\56\2\3\2\0\1\32\1\3\4\0\1\65"+
    "\1\36\1\104\1\107\2\0\1\65\6\36\1\70\1\0\1\32\5\36\1\60\3\0\3\3\7\36\1\42"+
    "\1\0\13\36\1\60\3\0\1\56\2\3\1\104\2\0\1\32\1\3\1\50\1\134\2\50\2\3\1\135"+
    "\1\136\12\36\1\73\2\0\1\57\2\3\1\60\2\36\1\32\2\0\1\32\1\3\5\36\1\37\1\137"+
    "\1\135\14\36\1\77\1\63\1\61\1\70\1\124\5\3\1\104\1\40\2\36\1\60\1\0\1\41\1"+
    "\140\2\3\1\51\1\37\1\51\1\37\1\51\1\37\2\3\1\36\1\37\1\36\1\37\12\50\1\136"+
    "\2\50\1\121\2\3\24\50\10\36\1\60\1\0\1\57\1\32\2\0\1\32\1\3\151\36\3\3\5\36"+
    "\1\37\1\104\14\36\101\3\133\36\1\40\32\36\1\40\11\3\1\36\1\37\2\3\1\104\1"+
    "\36\1\3\1\141\2\36\1\44\2\36\1\37\1\36\1\43\1\46\1\44\32\36\1\40\7\3\1\104"+
    "\132\36\1\40\4\3\20\36\1\41\15\36\12\3\3\36\1\56\4\0\4\3\1\0\1\57\2\3\1\52"+
    "\1\56\5\3\1\53\6\3\1\34\1\3\1\36\1\44\41\36\1\142\1\3\1\56\2\3\2\0\1\32\1"+
    "\3\1\51\5\36\1\37\1\52\1\51\5\36\1\37\2\3\1\41\25\36\1\37\1\41\1\36\1\41\1"+
    "\36\1\41\1\36\1\41\1\42\1\32\1\55\4\3\1\53\1\3\3\36\1\51\5\36\1\37\4\36\1"+
    "\37\1\46\3\36\1\40\3\36\1\40\10\3\36\36\1\37\21\3\15\0\1\56\41\3\1\34\40\3"+
    "\7\36\1\42\14\36\1\42\13\3\7\36\1\132\4\3\4\36\1\67\1\36\1\143\1\3\11\50\1"+
    "\121\2\3\7\36\1\40\11\36\1\3\2\36\1\53\1\32\12\3\47\36\1\40\2\0\1\32\25\3"+
    "\12\50\2\3\15\50\47\3\115\50\1\136\2\3\5\50\1\121\2\3\2\50\46\3\1\36\1\40"+
    "\1\44\12\36\1\46\1\42\1\66\5\36\1\40\2\3\5\50\1\136\2\3\7\50\1\136\20\3\4"+
    "\50\1\136\1\121\2\3\5\36\1\40\2\3\6\36\1\40\21\3\16\36\1\3\1\41\20\3\1\73"+
    "\1\55\1\3\1\0\1\36\2\51\6\36\1\3\1\57\1\52\10\3\7\36\1\42\7\50\1\76\10\3\2"+
    "\50\1\144\6\50\1\76\6\3\15\36\1\40\2\3\5\36\1\40\2\3\4\36\1\37\3\3\4\50\1"+
    "\121\33\3\22\36\1\42\15\3\14\50\1\136\3\3\14\50\1\136\103\3\1\117\15\36\3"+
    "\0\1\57\7\3\1\31\2\0\4\3\1\117\13\36\2\0\1\57\1\34\4\3\6\36\1\42\1\3\2\0\1"+
    "\32\1\3\1\117\10\36\1\60\3\0\1\64\2\0\4\3\10\50\1\136\1\145\2\3\1\117\13\36"+
    "\1\60\3\0\1\61\1\42\2\3\2\0\1\146\1\76\10\3\4\50\1\147\6\50\25\3\1\50\1\136"+
    "\1\134\1\147\3\50\1\147\2\50\1\76\1\3\13\50\1\136\11\3\1\144\1\50\2\150\5"+
    "\50\1\134\1\50\1\134\1\144\1\121\1\107\4\3\1\76\2\3\1\144\1\121\107\3\14\50"+
    "\5\3\1\147\56\3\13\50\1\136\12\3\1\50\11\3\14\50\5\3\1\76\16\3\12\36\1\60"+
    "\3\0\2\3\2\0\1\32\15\3\6\50\1\121\141\3\20\50\7\3\1\112\160\3\16\50\1\76\101"+
    "\3\133\36\1\132\12\50\1\121\31\3\30\0\1\57\7\3\61\50\57\3\13\36\1\37\164\3"+
    "\221\50\1\136\156\3\16\36\1\42\1\3\7\50\1\136\34\3\7\50\1\121\4\3\14\50\4"+
    "\3\1\50\7\3\1\112\5\50\1\3\1\144\4\50\134\3\21\36\1\42\2\3\1\73\12\0\1\57"+
    "\3\3\1\52\1\117\3\36\30\3\1\40\177\3\32\50\1\136\1\3\3\50\1\76\2\50\1\76\1"+
    "\3\2\50\1\121\262\3\1\53\1\32\1\53\4\0\1\57\1\53\1\0\7\3\1\31\1\32\44\3\1"+
    "\31\1\56\156\3\25\36\1\44\21\36\1\44\1\33\1\105\1\51\1\44\2\36\1\46\1\51\1"+
    "\36\1\51\17\36\1\46\1\37\1\51\1\36\1\44\1\36\1\44\6\36\1\46\1\37\1\36\1\43"+
    "\1\41\1\36\1\44\124\36\1\40\6\36\1\44\5\36\1\37\7\36\1\37\6\36\1\44\7\36\1"+
    "\44\5\36\1\37\7\36\1\37\6\36\1\44\7\36\1\44\5\36\1\37\2\36\1\31\14\0\61\50"+
    "\1\76\116\3\1\36\1\51\6\36\1\105\1\66\1\51\1\36\1\37\1\36\1\115\1\3\1\33\1"+
    "\104\1\115\1\51\1\105\1\66\2\115\1\105\1\66\1\37\1\36\1\37\1\36\1\51\1\43"+
    "\2\36\1\46\4\36\1\3\2\51\1\46\4\36\121\3\65\36\1\37\12\3\215\36\1\42\2\3\67"+
    "\36\1\40\240\50\1\121\127\3\7\36\1\40\170\3\1\34\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 420 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\36\1\45\1\1\1\0\1\2\1\1\2\36\4\0\1\43\1\66\1\6\1\74\1\42\1\71\1\35\1\10"+
    "\1\53\1\54\1\5\1\41\1\63\1\32\1\3\1\4\1\51\11\40\1\34\1\0\1\61\1\67\1\62\1"+
    "\73\1\72\4\50\1\52\11\50\1\57\1\7\1\60\1\75\1\37\1\11\1\15\1\33\1\25\1\17"+
    "\1\13\1\65\1\31\1\76\1\20\2\33\1\24\1\27\1\26\1\21\1\23\1\33\1\30\1\64\1\12"+
    "\1\16\1\22\1\77\1\14\1\100\1\33\1\55\1\44\1\56\1\70\1\36\2\0\4\36\4\0\1\47"+
    "\2\0\1\36\3\0\1\47\2\0\7\47\1\0\2\47\4\0\3\47\3\0\1\47\1\0\1\47\1\0\1\47\1"+
    "\0\4\47\1\0\1\46\2\47\1\0\3\47\1\0\1\36\4\46\1\0\3\47\3\0\1\36\1\0\5\36\1"+
    "\0\1\36\1\0\2\36\1\0\1\36\3\0\3\36\1\0\3\47\2\36\3\47\1\0\1\47\3\36\2\47\2"+
    "\36\1\0\4\36\3\47\2\0\2\47\1\36\4\47\3\36\1\47\2\0\2\36\1\47\1\36\1\47\3\36"+
    "\1\47\1\46\3\47\4\46\3\0\1\36\1\47\2\36\1\46\3\47\1\46\4\36\2\0\3\36\1\47"+
    "\4\0\1\47\1\0\2\47\1\0\1\47\1\36\3\0\1\46\4\0\1\36\3\47\1\46\4\0\1\46\2\0"+
    "\1\36\1\0\1\36\1\0\1\36\2\0\1\47\1\0\1\47\1\0\1\36\1\0\4\36\2\47\1\46\2\0"+
    "\2\46\2\0\1\36\3\46\1\47\1\0\2\36\1\47\1\36\1\47\1\0\1\47\2\46\1\0\1\36\2"+
    "\47\2\0\2\47\3\36\1\0\1\47\2\46\1\0\1\36\3\47\1\46\2\47\1\36\1\47\1\46\1\0"+
    "\2\46\2\0\5\46\3\0\1\47\1\36\1\47\2\36\2\0\1\47\1\36\2\47\2\0\1\36\2\47\1"+
    "\36\2\0\3\46\2\0\1\46\1\0\2\36\1\46\1\0\2\46\1\0\2\46\2\0\1\46");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\14\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\10\1\15\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\10\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\0\1\42\1\43"+
    "\1\5\2\0\1\6\1\0\1\7\2\10\1\0\5\10"+
    "\1\44\4\10\1\45\2\10\1\46\1\47\1\10\1\50"+
    "\5\10\1\51\3\10\2\15\1\52\1\53\1\54\2\55"+
    "\1\10\2\0\1\56\1\0\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\3\10\1\66\1\67\1\70\1\71"+
    "\3\0\1\43\2\10\1\0\4\10\1\72\10\10\1\73"+
    "\3\10\1\74\2\10\1\75\1\55\1\76\1\77\1\100"+
    "\1\10\1\101\1\10\1\102\1\103\1\43\1\0\1\10"+
    "\1\104\1\0\1\105\1\106\3\10\1\0\6\10\1\107"+
    "\1\110\3\10\1\111\1\0\1\112\2\10\1\112\1\113"+
    "\1\10\1\114\2\10\1\115\1\10\1\116\1\117\1\10"+
    "\1\120\1\10\1\121\1\122\3\10\1\123\1\124\4\10";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\101\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\101\0\101"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\101\0\101"+
    "\0\u06db\0\101\0\101\0\101\0\u071c\0\u075d\0\101\0\u079e"+
    "\0\u07df\0\u0820\0\u0861\0\u08a2\0\101\0\101\0\101\0\101"+
    "\0\u08e3\0\u0924\0\u0965\0\101\0\u09a6\0\u09e7\0\101\0\u0a28"+
    "\0\101\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0249\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0249\0\u0d75"+
    "\0\u0db6\0\u0249\0\u0249\0\u0df7\0\u0249\0\u0e38\0\u0e79\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0249\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\101"+
    "\0\101\0\101\0\101\0\u1081\0\u10c2\0\101\0\u1103\0\u1144"+
    "\0\u1103\0\u069a\0\u1185\0\101\0\101\0\101\0\101\0\101"+
    "\0\101\0\u11c6\0\u1207\0\u1248\0\101\0\101\0\101\0\101"+
    "\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u0249\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u0249\0\u175c\0\u179d\0\u17de"+
    "\0\u0249\0\u181f\0\u1860\0\101\0\u18a1\0\101\0\u1103\0\101"+
    "\0\u18e2\0\u0249\0\u1923\0\101\0\101\0\101\0\u134c\0\u1964"+
    "\0\u0249\0\u19a5\0\u0249\0\u0249\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u0249\0\u0249"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u0249\0\u1d33\0\u19a5\0\u1d74\0\u1db5"+
    "\0\u1df6\0\u0249\0\u1e37\0\u0249\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b"+
    "\0\u0249\0\u1d33\0\u1f7c\0\u0249\0\u1fbd\0\u0249\0\u0249\0\u1ffe"+
    "\0\u203f\0\u2080\0\u0249\0\u0249\0\u20c1\0\u2102\0\u2143\0\u2184";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\13\1\22\1\23\1\24\2\13\1\25"+
    "\1\13\1\26\1\27\1\2\1\30\1\31\1\32\1\33"+
    "\1\3\1\34\1\3\3\35\1\36\1\35\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\13"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\3\13\102\0\2\3\40\0\1\3\1\0\1\3"+
    "\33\0\4\61\1\62\1\63\35\61\1\0\35\61\1\6"+
    "\1\0\4\6\1\64\1\65\71\6\1\7\1\0\5\7"+
    "\1\66\1\67\70\7\1\10\1\0\5\10\1\70\1\10"+
    "\1\71\67\10\12\0\1\13\1\72\14\13\1\73\1\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\2\13\1\75\12\0\12\13"+
    "\1\76\5\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\12\0"+
    "\20\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\4\13"+
    "\1\77\4\13\1\100\2\13\1\101\3\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\1\102\1\13\10\0\3\13\12\0\14\13\1\103\1\13"+
    "\1\104\1\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\1\105\1\13\10\0\3\13"+
    "\12\0\1\13\1\106\5\13\1\107\10\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\14\13\1\110\1\111\2\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\1\112\1\113\10\0\3\13\12\0\4\13"+
    "\1\114\11\13\1\115\1\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\2\13\10\0"+
    "\3\13\12\0\3\13\1\116\2\13\1\117\11\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\3\13\1\120\14\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\4\13\1\121"+
    "\2\13\1\122\10\13\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\1\123\1\13\10\0"+
    "\3\13\12\0\3\13\1\124\1\125\13\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\32\0\1\126\5\0\1\127\10\0"+
    "\1\130\4\0\1\131\3\0\1\132\52\0\1\133\47\0"+
    "\1\134\7\0\1\135\24\0\1\31\10\0\1\31\1\135"+
    "\66\0\1\127\1\136\7\0\1\130\71\0\1\33\36\0"+
    "\1\137\1\0\30\137\1\140\10\137\3\0\10\137\1\141"+
    "\22\137\12\0\20\35\1\0\1\35\2\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\35\10\0\3\35\3\0"+
    "\1\134\7\0\1\135\24\0\1\142\10\0\1\142\1\135"+
    "\60\0\1\143\11\0\1\144\70\0\1\145\24\0\1\146"+
    "\5\0\1\147\73\0\1\150\4\0\1\151\23\0\3\13"+
    "\1\152\1\153\11\13\1\154\1\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\67\0\1\155\73\0\1\156\4\0\1\157"+
    "\100\0\1\160\30\0\1\161\61\0\1\162\1\0\2\162"+
    "\1\0\2\162\1\163\71\162\1\62\1\0\77\62\5\63"+
    "\1\164\73\63\1\6\1\0\77\6\1\7\1\0\77\7"+
    "\1\10\1\0\77\10\12\0\2\13\1\165\15\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\4\13\1\166\13\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\4\0\1\167\106\0"+
    "\11\13\1\170\6\13\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\2\13\10\0\3\13"+
    "\12\0\20\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\1\171\1\13\10\0\3\13"+
    "\12\0\5\13\1\172\12\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\2\13\10\0"+
    "\3\13\12\0\11\13\1\173\6\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\5\13\1\174\12\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\12\13\1\175\5\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\14\13\1\176\3\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\6\13\1\177"+
    "\11\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\20\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\1\13\1\200\10\0\3\13\12\0\11\13"+
    "\1\201\6\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\12\0"+
    "\3\13\1\202\5\13\1\203\6\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\1\204\17\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\16\13\1\205\1\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\5\13\1\206\12\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\20\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\1\207\1\13\10\0\3\13\12\0\12\13\1\210\5\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\1\211\17\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\1\212\17\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\12\13\1\213"+
    "\5\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\32\0\1\214"+
    "\106\0\1\127\10\0\1\127\42\0\1\135\24\0\1\134"+
    "\10\0\1\134\1\135\60\0\1\215\5\0\2\215\7\0"+
    "\1\215\27\0\1\137\1\0\41\137\1\0\1\216\1\0"+
    "\34\137\1\0\41\137\1\0\1\216\1\0\10\137\1\217"+
    "\22\137\44\0\1\220\46\0\12\13\1\221\5\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\14\13\1\222\3\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\7\13\1\223"+
    "\10\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\77\0\1\224"+
    "\1\0\1\162\1\0\2\162\1\225\2\162\1\163\72\162"+
    "\1\0\77\162\4\63\1\226\1\227\73\63\12\0\1\230"+
    "\17\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\1\13"+
    "\1\231\16\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\4\0"+
    "\1\232\106\0\1\13\1\233\16\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\1\13\1\234\16\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\6\13\1\235\11\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\12\13\1\236\5\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\1\13\1\237"+
    "\16\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\20\13"+
    "\1\0\1\13\1\240\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\14\13\1\241"+
    "\3\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\3\13"+
    "\1\242\14\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\12\0"+
    "\4\13\1\243\13\13\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\2\13\10\0\3\13"+
    "\12\0\17\13\1\244\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\2\13\10\0\3\13"+
    "\12\0\7\13\1\245\10\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\2\13\10\0"+
    "\3\13\12\0\11\13\1\246\6\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\1\13\1\235\16\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\1\13\1\247\16\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\12\13\1\250\5\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\13\13\1\251"+
    "\4\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\1\252"+
    "\17\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\40\0\1\215"+
    "\10\0\1\215\41\0\20\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\1\253\1\13"+
    "\10\0\3\13\12\0\15\13\1\254\2\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\4\0\1\255\5\0\20\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\3\0\2\256\5\0\24\256"+
    "\1\0\2\256\7\0\3\256\11\0\2\256\1\0\1\256"+
    "\3\0\1\256\2\0\3\256\12\0\7\13\1\230\10\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\6\13\1\257"+
    "\11\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\20\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\1\260\1\13\10\0\3\13\3\0\1\261"+
    "\1\167\5\0\24\261\1\0\2\261\7\0\3\261\11\0"+
    "\2\261\1\0\1\261\3\0\1\261\2\0\3\261\12\0"+
    "\17\13\1\262\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\12\0"+
    "\4\13\1\263\13\13\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\2\13\10\0\3\13"+
    "\12\0\1\264\17\13\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\2\13\10\0\3\13"+
    "\12\0\1\13\1\230\16\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\2\13\10\0"+
    "\3\13\12\0\16\13\1\265\1\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\4\13\1\266\13\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\20\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\1\267\2\13\12\0\6\13\1\270\11\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\1\13\1\271\16\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\22\272\3\0"+
    "\1\272\10\0\1\272\1\0\1\272\11\0\2\272\10\0"+
    "\3\272\12\0\13\13\1\273\4\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\20\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\1\274\1\13"+
    "\10\0\3\13\3\0\1\261\6\0\24\261\1\0\2\261"+
    "\7\0\3\261\11\0\2\261\1\0\1\261\3\0\1\261"+
    "\2\0\3\261\12\0\12\13\1\275\5\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\1\276\17\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\1\277\17\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13\12\0\1\13\1\300\16\13\1\0"+
    "\1\13\1\74\1\0\3\35\1\0\1\35\4\0\4\35"+
    "\11\0\2\13\10\0\3\13\12\0\11\13\1\301\6\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\2\13\10\0\3\13\12\0\3\13\1\302"+
    "\14\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\1\303"+
    "\17\13\1\0\1\13\1\74\1\0\3\35\1\0\1\35"+
    "\4\0\4\35\11\0\2\13\10\0\3\13\12\0\20\13"+
    "\1\0\1\13\1\74\1\0\3\35\1\0\1\35\4\0"+
    "\4\35\11\0\1\304\1\13\10\0\3\13\12\0\3\13"+
    "\1\305\14\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\12\0"+
    "\1\306\17\13\1\0\1\13\1\74\1\0\3\35\1\0"+
    "\1\35\4\0\4\35\11\0\2\13\10\0\3\13\12\0"+
    "\16\13\1\165\1\13\1\0\1\13\1\74\1\0\3\35"+
    "\1\0\1\35\4\0\4\35\11\0\2\13\10\0\3\13"+
    "\12\0\6\13\1\307\11\13\1\0\1\13\1\74\1\0"+
    "\3\35\1\0\1\35\4\0\4\35\11\0\2\13\10\0"+
    "\3\13\12\0\7\13\1\310\10\13\1\0\1\13\1\74"+
    "\1\0\3\35\1\0\1\35\4\0\4\35\11\0\2\13"+
    "\10\0\3\13\12\0\14\13\1\230\3\13\1\0\1\13"+
    "\1\74\1\0\3\35\1\0\1\35\4\0\4\35\11\0"+
    "\2\13\10\0\3\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8645];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\21\1\2\11\6\1\2\11"+
    "\1\1\3\11\2\1\1\11\5\1\4\11\1\0\2\1"+
    "\1\11\2\0\1\11\1\0\1\11\2\1\1\0\33\1"+
    "\4\11\2\1\1\11\2\0\1\1\1\0\1\1\6\11"+
    "\3\1\4\11\3\0\3\1\1\0\24\1\1\11\1\1"+
    "\1\11\1\1\1\11\3\1\3\11\1\0\2\1\1\0"+
    "\5\1\1\0\14\1\1\0\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _WeaveLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _WeaveLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 85: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 86: break;
          case 3: 
            { return DIVISION;
            }
          case 87: break;
          case 4: 
            { return MULTIPLY;
            }
          case 88: break;
          case 5: 
            { return DOUBLE_QUOTED_STRING;
            }
          case 89: break;
          case 6: 
            { return SINGLE_QUOTED_STRING;
            }
          case 90: break;
          case 7: 
            { return BACKTIKED_QUOTED_STRING;
            }
          case 91: break;
          case 8: 
            { return ID;
            }
          case 92: break;
          case 9: 
            { return MINUS;
            }
          case 93: break;
          case 10: 
            { return COLON;
            }
          case 94: break;
          case 11: 
            { return AND;
            }
          case 95: break;
          case 12: 
            { return UNDERSCORE;
            }
          case 96: break;
          case 13: 
            { return INTEGER_LITERAL;
            }
          case 97: break;
          case 14: 
            { return PLUS;
            }
          case 98: break;
          case 15: 
            { return DOLLAR_VARIABLE;
            }
          case 99: break;
          case 16: 
            { return OR;
            }
          case 100: break;
          case 17: 
            { return L_PARREN;
            }
          case 101: break;
          case 18: 
            { return R_PARREN;
            }
          case 102: break;
          case 19: 
            { return L_CURLY;
            }
          case 103: break;
          case 20: 
            { return R_CURLY;
            }
          case 104: break;
          case 21: 
            { return L_BRACKET;
            }
          case 105: break;
          case 22: 
            { return R_BRACKET;
            }
          case 106: break;
          case 23: 
            { return LESS;
            }
          case 107: break;
          case 24: 
            { return GREATER;
            }
          case 108: break;
          case 25: 
            { return COMMA;
            }
          case 109: break;
          case 26: 
            { return ESCLAMATION;
            }
          case 110: break;
          case 27: 
            { return EQ;
            }
          case 111: break;
          case 28: 
            { return TILDE;
            }
          case 112: break;
          case 29: 
            { return MODULO;
            }
          case 113: break;
          case 30: 
            { return AT;
            }
          case 114: break;
          case 31: 
            { return QUESTION;
            }
          case 115: break;
          case 32: 
            { return HASH;
            }
          case 116: break;
          case 33: 
            { return XOR;
            }
          case 117: break;
          case 34: 
            { return LINE_COMMENT;
            }
          case 118: break;
          case 35: 
            { return MULTILINE_COMMENT;
            }
          case 119: break;
          case 36: 
            { return AS;
            }
          case 120: break;
          case 37: 
            { return DO_KEYWORD;
            }
          case 121: break;
          case 38: 
            { return IS;
            }
          case 122: break;
          case 39: 
            { return IF;
            }
          case 123: break;
          case 40: 
            { return OR_KEYWORD;
            }
          case 124: break;
          case 41: 
            { return NAMESPACE_DIRECTIVE_KEYWORD;
            }
          case 125: break;
          case 42: 
            { return CLOSE_ORDERED_KEYWORD;
            }
          case 126: break;
          case 43: 
            { return ARROW_TOKEN;
            }
          case 127: break;
          case 44: 
            { return PACKAGE_SEPARATOR;
            }
          case 128: break;
          case 45: 
            { return DOUBLE_LITERAL;
            }
          case 129: break;
          case 46: 
            { return CLOSE_CLOSE_KEYWORD;
            }
          case 130: break;
          case 47: 
            { return OPEN_ORDERED_KEYWORD;
            }
          case 131: break;
          case 48: 
            { return OPEN_CLOSE_KEYWORD;
            }
          case 132: break;
          case 49: 
            { return SUB_TYPE;
            }
          case 133: break;
          case 50: 
            { return LEFT_SHIFT;
            }
          case 134: break;
          case 51: 
            { return LESS_EQUAL;
            }
          case 135: break;
          case 52: 
            { return RIGHT_SHIFT;
            }
          case 136: break;
          case 53: 
            { return GREATER_EQUAL;
            }
          case 137: break;
          case 54: 
            { return NOT_EQUAL;
            }
          case 138: break;
          case 55: 
            { return FAT_ARROW;
            }
          case 139: break;
          case 56: 
            { return EQUAL;
            }
          case 140: break;
          case 57: 
            { return SIMILAR;
            }
          case 141: break;
          case 58: 
            { return AND_KEYWORD;
            }
          case 142: break;
          case 59: 
            { return VAR_DIRECTIVE_KEYWORD;
            }
          case 143: break;
          case 60: 
            { return NOT_KEYWORD;
            }
          case 144: break;
          case 61: 
            { return DOCUMENT_SEPARATOR;
            }
          case 145: break;
          case 62: 
            { return RULE_ANY_DATE;
            }
          case 146: break;
          case 63: 
            { return CLOSE_CLOSE_ORDERED_KEYWORD;
            }
          case 147: break;
          case 64: 
            { return OPEN_CLOSE_ORDERED_KEYWORD;
            }
          case 148: break;
          case 65: 
            { return FUNCTION_DIRECTIVE_KEYWORD;
            }
          case 149: break;
          case 66: 
            { return VERSION_DIRECTIVE_KEYWORD;
            }
          case 150: break;
          case 67: 
            { return RULE_ANY_REGEX;
            }
          case 151: break;
          case 68: 
            { return TRUE_LITERAL;
            }
          case 152: break;
          case 69: 
            { return TYPE_DIRECTIVE_KEYWORD;
            }
          case 153: break;
          case 70: 
            { return ELSE;
            }
          case 154: break;
          case 71: 
            { return CASE_KEYWORD;
            }
          case 155: break;
          case 72: 
            { return NULL_LITERAL_KEYWORD;
            }
          case 156: break;
          case 73: 
            { return FROM_KEYWORD;
            }
          case 157: break;
          case 74: 
            { return NAMESPACE_URI;
            }
          case 158: break;
          case 75: 
            { return USING;
            }
          case 159: break;
          case 76: 
            { return INPUT_DIRECTIVE_KEYWORD;
            }
          case 160: break;
          case 77: 
            { return MATCH_KEYWORD;
            }
          case 161: break;
          case 78: 
            { return FALSE_LITERAL;
            }
          case 162: break;
          case 79: 
            { return MIME_TYPE_KEYWORD;
            }
          case 163: break;
          case 80: 
            { return UNLESS;
            }
          case 164: break;
          case 81: 
            { return IMPORT_DIRECTIVE_KEYWORD;
            }
          case 165: break;
          case 82: 
            { return OUTPUT_DIRECTIVE_KEYWORD;
            }
          case 166: break;
          case 83: 
            { return DEFAULT;
            }
          case 167: break;
          case 84: 
            { return MATCHES_KEYWORD;
            }
          case 168: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
