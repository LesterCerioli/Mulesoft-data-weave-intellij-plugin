{
  a: [0, 1, 2][0],                                             // 0 (get)
  b: [0, 1, 2][-1],                                            // 2 (reverse get)
  c: [0, 1, 2][(0 to 1)],                                          // [ 0, 1 ] (slice)
  d: [0, 1, 2][(-1 to -2)],                                        // [ 2, 1 ] (reverse slice)
  c: sizeOf([0, 1, 2]),                                         // 3 (length)
  d: [0, 1, 2] ++ [3, 4, 5],                                   // [0, 1, 2, 3, 4, 5] (addAll)
  e: [0, 1, 2] -- [3, 1, 5],                                   // [0, 2] (removeAll)
  f: [3, 4, 5] - 4,                                            // [3, 5] (remove)
  g: [0, 1, 2] contains 0,                                     // true (contains)
  h: ["a", "bc", "d"] contains /de/,                           // false (contains)
  i: ["a", "bc", "d"] contains ["bc", "de"],                   // false (containsAll)
  j: ["a", "bc", "d"] find "bc",                               // 1 (indexOf)
  k: ["a", "d", "b"] orderBy $,                                // ["a", "b", "d"] (sort)
  l: ["a", "d", "b"] + "c",                                   // ["a", "d", "b", "c"] (append/push)
  m: ["a", "d", "b"] map ($ ++ "d"),                             // ["ad", "dd", "bd"] (map)
  n: ["a", "d", "b"] reduce ($$ ++ $),                           // "adb" (reduce)
  o: ["a", "d", "b"] reduce ($$ ++ "," ++ $),                    // "a,d,b" (join)
  p: using (arr =  [5, 3, 10]) (arr reduce $$ + $ / sizeOf(arr)), // 6 (avg)
  q: [1,2,]
}